{"ast":null,"code":"export const getCount = num => {\n  if (num > 1000) {\n    return (num / 1000).toFixed(1) + 'k';\n  }\n  return num;\n};\nexport const getDate = date => {\n  let before = new Date(date);\n  let now = new Date();\n  let time = (now - before) / 1000;\n  let result;\n  if (time < 120) {\n    result = '刚刚';\n  } else if (time < 3600) {\n    result = Math.floor(time / 60) + \"分钟前\";\n  } else if (time < 3600 * 24) {\n    result = Math.floor(time / 3600) + \"小时前\";\n  } else {\n    result = before.toLocaleString();\n  }\n  return result;\n};\nexport const getMonthAndDay = timestamp => {\n  let date = new Date(timestamp);\n  let month = date.getMonth() + 1;\n  let day = date.getDate();\n  month = month.toString().padStart(2, '0');\n  day = day.toString().padStart(2, '0');\n  return month + '/' + day;\n};\nexport const descArray = arr => {\n  return arr.sort((a, b) => {\n    return b - a;\n  });\n};\nexport const ascArray = arr => {\n  return arr.sort((a, b) => {\n    return a - b;\n  });\n};\nexport const getDaysBetween = (dateString1, dateString2) => {\n  let startDate = Date.parse(dateString1);\n  let endDate = Date.parse(dateString2);\n  let days = (endDate - startDate) / (1 * 24 * 60 * 60 * 1000);\n  return days;\n};\nexport const doPercent = (num1, num2) => {\n  let percent = Math.ceil(num1 / num2 * 100);\n  if (Number.isFinite(percent)) {\n    return percent;\n  } else {\n    return 0;\n  }\n};","map":{"version":3,"names":["getCount","num","toFixed","getDate","date","before","Date","now","time","result","Math","floor","toLocaleString","getMonthAndDay","timestamp","month","getMonth","day","toString","padStart","descArray","arr","sort","a","b","ascArray","getDaysBetween","dateString1","dateString2","startDate","parse","endDate","days","doPercent","num1","num2","percent","ceil","Number","isFinite"],"sources":["D:/Software Engineering/Bytebin-app/src/util/tools.js"],"sourcesContent":["export const getCount = (num) => {\r\n    if (num > 1000) {\r\n        return (num / 1000).toFixed(1) + 'k';\r\n    }\r\n    return num;\r\n}\r\nexport const getDate = (date) => {\r\n    let before = new Date(date);\r\n    let now = new Date();\r\n    let time = (now - before) / 1000;\r\n    let result;\r\n    if (time < 120) {\r\n        result = '刚刚'\r\n    } else if (time < 3600) {\r\n        result = Math.floor(time / 60) + \"分钟前\"\r\n    } else if (time < 3600 * 24) {\r\n        result = Math.floor(time / 3600) + \"小时前\"\r\n    } else {\r\n        result = before.toLocaleString()\r\n    }\r\n    return result;\r\n}\r\nexport const getMonthAndDay = (timestamp) => {\r\n    let date = new Date(timestamp);\r\n    let month = date.getMonth() + 1;\r\n    let day = date.getDate();\r\n    month = month.toString().padStart(2, '0');\r\n    day = day.toString().padStart(2, '0');\r\n    return month + '/' + day;\r\n}\r\nexport const descArray = (arr) => {\r\n    return arr.sort((a, b) => {\r\n        return b - a;\r\n    })\r\n}\r\nexport const ascArray = (arr) => {\r\n    return arr.sort((a, b) => {\r\n        return a - b;\r\n    })\r\n}\r\nexport const getDaysBetween = (dateString1, dateString2) => {\r\n    let startDate = Date.parse(dateString1);\r\n    let endDate = Date.parse(dateString2);\r\n    let days = (endDate - startDate) / (1 * 24 * 60 * 60 * 1000);\r\n    return days;\r\n}\r\nexport const doPercent = (num1, num2) => {\r\n    let percent = Math.ceil(num1 / num2 * 100);\r\n    if (Number.isFinite(percent)) {\r\n        return percent\r\n    } else {\r\n        return 0\r\n    }\r\n}\r\n\r\n"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAIC,GAAG,IAAK;EAC7B,IAAIA,GAAG,GAAG,IAAI,EAAE;IACZ,OAAO,CAACA,GAAG,GAAG,IAAI,EAAEC,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG;EACxC;EACA,OAAOD,GAAG;AACd,CAAC;AACD,OAAO,MAAME,OAAO,GAAIC,IAAI,IAAK;EAC7B,IAAIC,MAAM,GAAG,IAAIC,IAAI,CAACF,IAAI,CAAC;EAC3B,IAAIG,GAAG,GAAG,IAAID,IAAI,CAAC,CAAC;EACpB,IAAIE,IAAI,GAAG,CAACD,GAAG,GAAGF,MAAM,IAAI,IAAI;EAChC,IAAII,MAAM;EACV,IAAID,IAAI,GAAG,GAAG,EAAE;IACZC,MAAM,GAAG,IAAI;EACjB,CAAC,MAAM,IAAID,IAAI,GAAG,IAAI,EAAE;IACpBC,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACH,IAAI,GAAG,EAAE,CAAC,GAAG,KAAK;EAC1C,CAAC,MAAM,IAAIA,IAAI,GAAG,IAAI,GAAG,EAAE,EAAE;IACzBC,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACH,IAAI,GAAG,IAAI,CAAC,GAAG,KAAK;EAC5C,CAAC,MAAM;IACHC,MAAM,GAAGJ,MAAM,CAACO,cAAc,CAAC,CAAC;EACpC;EACA,OAAOH,MAAM;AACjB,CAAC;AACD,OAAO,MAAMI,cAAc,GAAIC,SAAS,IAAK;EACzC,IAAIV,IAAI,GAAG,IAAIE,IAAI,CAACQ,SAAS,CAAC;EAC9B,IAAIC,KAAK,GAAGX,IAAI,CAACY,QAAQ,CAAC,CAAC,GAAG,CAAC;EAC/B,IAAIC,GAAG,GAAGb,IAAI,CAACD,OAAO,CAAC,CAAC;EACxBY,KAAK,GAAGA,KAAK,CAACG,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACzCF,GAAG,GAAGA,GAAG,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACrC,OAAOJ,KAAK,GAAG,GAAG,GAAGE,GAAG;AAC5B,CAAC;AACD,OAAO,MAAMG,SAAS,GAAIC,GAAG,IAAK;EAC9B,OAAOA,GAAG,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;IACtB,OAAOA,CAAC,GAAGD,CAAC;EAChB,CAAC,CAAC;AACN,CAAC;AACD,OAAO,MAAME,QAAQ,GAAIJ,GAAG,IAAK;EAC7B,OAAOA,GAAG,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;IACtB,OAAOD,CAAC,GAAGC,CAAC;EAChB,CAAC,CAAC;AACN,CAAC;AACD,OAAO,MAAME,cAAc,GAAGA,CAACC,WAAW,EAAEC,WAAW,KAAK;EACxD,IAAIC,SAAS,GAAGvB,IAAI,CAACwB,KAAK,CAACH,WAAW,CAAC;EACvC,IAAII,OAAO,GAAGzB,IAAI,CAACwB,KAAK,CAACF,WAAW,CAAC;EACrC,IAAII,IAAI,GAAG,CAACD,OAAO,GAAGF,SAAS,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;EAC5D,OAAOG,IAAI;AACf,CAAC;AACD,OAAO,MAAMC,SAAS,GAAGA,CAACC,IAAI,EAAEC,IAAI,KAAK;EACrC,IAAIC,OAAO,GAAG1B,IAAI,CAAC2B,IAAI,CAACH,IAAI,GAAGC,IAAI,GAAG,GAAG,CAAC;EAC1C,IAAIG,MAAM,CAACC,QAAQ,CAACH,OAAO,CAAC,EAAE;IAC1B,OAAOA,OAAO;EAClB,CAAC,MAAM;IACH,OAAO,CAAC;EACZ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}