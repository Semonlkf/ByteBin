{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { deleteArticle, getUserArticleByYear, getUserTimeline } from \"@/api/Article\";\nimport { getMonthAndDay } from \"@/util/tools\";\nexport default {\n  name: \"UserArticle\",\n  props: {\n    userId: String\n  },\n  data() {\n    return {\n      articles: [{\n        year: '',\n        records: []\n      }]\n    };\n  },\n  methods: {\n    getTime(date) {\n      return getMonthAndDay(date);\n    },\n    getTimeLine() {\n      getUserTimeline(this.userId).then(res => {\n        let year = res.data.year;\n        for (let i = 0; i < year.length; i++) {\n          if (!this.articles[i]) {\n            this.articles[i] = {};\n          }\n          this.articles[i].year = year[i];\n        }\n        if (this.articles) {\n          this.getNode(0);\n        }\n        this.$forceUpdate();\n      });\n    },\n    getNode(index) {\n      if (this.articles[index].year) {\n        getUserArticleByYear(this.userId, this.articles[index].year).then(res => {\n          this.articles[index].records = res.data.articles;\n          this.$forceUpdate();\n        });\n      }\n    },\n    del(index1, index2) {\n      let id = this.articles[index1].records[index2].id;\n      deleteArticle(id).then(res => {\n        if (res.code === 2001) {\n          this.articles[index1].records.splice(index2, 1);\n          this.$forceUpdate();\n          this.$notify({\n            title: \"Bloggy\",\n            message: res.message,\n            type: \"success\",\n            duration: 1000\n          });\n        } else {\n          this.$notify({\n            title: \"Bloggy\",\n            message: res.message,\n            type: \"error\",\n            duration: 1000\n          });\n        }\n      });\n    },\n    toDetail(id) {\n      this.$router.push(\"/detail?id=\" + id);\n    },\n    toEdit(id) {\n      this.$router.push(\"/write?id=\" + id);\n    }\n  },\n  created() {\n    this.getTimeLine(this.userId);\n  }\n};","map":{"version":3,"names":["deleteArticle","getUserArticleByYear","getUserTimeline","getMonthAndDay","name","props","userId","String","data","articles","year","records","methods","getTime","date","getTimeLine","then","res","i","length","getNode","$forceUpdate","index","del","index1","index2","id","code","splice","$notify","title","message","type","duration","toDetail","$router","push","toEdit","created"],"sources":["src/components/UserArticle.vue"],"sourcesContent":["<template>\n  <el-container>\n    <el-main>\n      <el-empty v-if=\"articles[0].year===''\" description=\"空空如也\"></el-empty>\n      <div v-for=\"(article,index) in articles\">\n        <el-link @click.native=\"getNode(index)\">\n          <div class=\"year\">{{ article.year }}</div>\n        </el-link>\n        <el-timeline :reverse=\"true\">\n          <el-timeline-item\n              v-for=\"(record,index2) in article.records\" :timestamp=\"getTime(record.createTime)\"\n              placement=\"top\">\n            <el-card>\n              <el-row style=\"width: 100%;height: 40px\">\n                <el-col :span=\"18\" style=\"text-align: left\">\n                  <el-link style=\"font-size: 16px\" @click=\"toDetail(record.id)\"> {{ record.title }}</el-link>\n                </el-col>\n                <el-col :span=\"6\" style=\"text-align: right;\">\n                  <el-button icon=\"el-icon-edit\" type=\"primary\" @click=\"toEdit(record.id)\"></el-button>\n                  <el-button icon=\"el-icon-delete\" type=\"danger\" @click=\"del(index,index2)\"></el-button>\n                </el-col>\n              </el-row>\n\n            </el-card>\n\n          </el-timeline-item>\n        </el-timeline>\n      </div>\n    </el-main>\n  </el-container>\n</template>\n\n<script>\nimport {deleteArticle, getUserArticleByYear, getUserTimeline} from \"@/api/Article\";\nimport {getMonthAndDay} from \"@/util/tools\";\n\nexport default {\n  name: \"UserArticle\",\n  props: {\n    userId: String\n  },\n  data() {\n    return {\n      articles: [\n        {\n          year: '',\n          records: []\n        }\n      ]\n    }\n  },\n  methods: {\n    getTime(date) {\n      return getMonthAndDay(date);\n    },\n    getTimeLine() {\n      getUserTimeline(this.userId).then((res) => {\n        let year = res.data.year\n        for (let i = 0; i < year.length; i++) {\n          if (!this.articles[i]) {\n            this.articles[i] = {}\n          }\n          this.articles[i].year = year[i]\n        }\n        if (this.articles) {\n          this.getNode(0)\n        }\n        this.$forceUpdate()\n      })\n    },\n    getNode(index) {\n      if (this.articles[index].year) {\n        getUserArticleByYear(this.userId, this.articles[index].year).then((res) => {\n          this.articles[index].records = res.data.articles\n          this.$forceUpdate()\n        })\n      }\n    },\n    del(index1, index2) {\n      let id = this.articles[index1].records[index2].id\n      deleteArticle(id).then((res) => {\n        if (res.code === 2001) {\n          this.articles[index1].records.splice(index2, 1)\n          this.$forceUpdate()\n          this.$notify({\n            title: \"Bloggy\",\n            message: res.message,\n            type: \"success\",\n            duration: 1000\n          })\n        } else {\n          this.$notify({\n            title: \"Bloggy\",\n            message: res.message,\n            type: \"error\",\n            duration: 1000\n          })\n        }\n      })\n    },\n    toDetail(id) {\n      this.$router.push(\"/detail?id=\" + id);\n    },\n    toEdit(id) {\n      this.$router.push(\"/write?id=\" + id);\n\n    }\n  },\n  created() {\n    this.getTimeLine(this.userId)\n  }\n}\n</script>\n\n<style scoped>\n.year {\n  font-size: 20px;\n  margin-bottom: 10px;\n}\n</style>\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,SAAAA,aAAA,EAAAC,oBAAA,EAAAC,eAAA;AACA,SAAAC,cAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACAC,MAAA,EAAAC;EACA;EACAC,KAAA;IACA;MACAC,QAAA,GACA;QACAC,IAAA;QACAC,OAAA;MACA;IAEA;EACA;EACAC,OAAA;IACAC,QAAAC,IAAA;MACA,OAAAX,cAAA,CAAAW,IAAA;IACA;IACAC,YAAA;MACAb,eAAA,MAAAI,MAAA,EAAAU,IAAA,CAAAC,GAAA;QACA,IAAAP,IAAA,GAAAO,GAAA,CAAAT,IAAA,CAAAE,IAAA;QACA,SAAAQ,CAAA,MAAAA,CAAA,GAAAR,IAAA,CAAAS,MAAA,EAAAD,CAAA;UACA,UAAAT,QAAA,CAAAS,CAAA;YACA,KAAAT,QAAA,CAAAS,CAAA;UACA;UACA,KAAAT,QAAA,CAAAS,CAAA,EAAAR,IAAA,GAAAA,IAAA,CAAAQ,CAAA;QACA;QACA,SAAAT,QAAA;UACA,KAAAW,OAAA;QACA;QACA,KAAAC,YAAA;MACA;IACA;IACAD,QAAAE,KAAA;MACA,SAAAb,QAAA,CAAAa,KAAA,EAAAZ,IAAA;QACAT,oBAAA,MAAAK,MAAA,OAAAG,QAAA,CAAAa,KAAA,EAAAZ,IAAA,EAAAM,IAAA,CAAAC,GAAA;UACA,KAAAR,QAAA,CAAAa,KAAA,EAAAX,OAAA,GAAAM,GAAA,CAAAT,IAAA,CAAAC,QAAA;UACA,KAAAY,YAAA;QACA;MACA;IACA;IACAE,IAAAC,MAAA,EAAAC,MAAA;MACA,IAAAC,EAAA,QAAAjB,QAAA,CAAAe,MAAA,EAAAb,OAAA,CAAAc,MAAA,EAAAC,EAAA;MACA1B,aAAA,CAAA0B,EAAA,EAAAV,IAAA,CAAAC,GAAA;QACA,IAAAA,GAAA,CAAAU,IAAA;UACA,KAAAlB,QAAA,CAAAe,MAAA,EAAAb,OAAA,CAAAiB,MAAA,CAAAH,MAAA;UACA,KAAAJ,YAAA;UACA,KAAAQ,OAAA;YACAC,KAAA;YACAC,OAAA,EAAAd,GAAA,CAAAc,OAAA;YACAC,IAAA;YACAC,QAAA;UACA;QACA;UACA,KAAAJ,OAAA;YACAC,KAAA;YACAC,OAAA,EAAAd,GAAA,CAAAc,OAAA;YACAC,IAAA;YACAC,QAAA;UACA;QACA;MACA;IACA;IACAC,SAAAR,EAAA;MACA,KAAAS,OAAA,CAAAC,IAAA,iBAAAV,EAAA;IACA;IACAW,OAAAX,EAAA;MACA,KAAAS,OAAA,CAAAC,IAAA,gBAAAV,EAAA;IAEA;EACA;EACAY,QAAA;IACA,KAAAvB,WAAA,MAAAT,MAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}