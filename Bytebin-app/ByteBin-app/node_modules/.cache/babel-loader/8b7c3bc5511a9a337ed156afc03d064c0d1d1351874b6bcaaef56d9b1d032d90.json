{"ast":null,"code":"import axios from \"axios\";\nimport { Message } from \"element-ui\";\nconst service = axios.create({\n  timeout: 30000,\n  // 请求 30s 超时\n  baseURL: \"http://localhost:8080\",\n  headers: {\n    get: {\n      'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'\n    },\n    post: {\n      'Content-Type': 'application/json;charset=utf-8'\n    }\n  }\n});\n// get 请求\nexport function Get({\n  url,\n  params = {}\n}) {\n  for (const key in params) {\n    url = url + \"/\" + params[key];\n  }\n  console.log(url);\n  return new Promise((resolve, reject) => {\n    service.get(url).then(res => {\n      resolve(res.data);\n    }).catch(err => {\n      reject(err);\n    });\n  });\n}\n// post\n// post请求\nexport function JsonPost({\n  url,\n  data = {},\n  params = {}\n}) {\n  return new Promise((resolve, reject) => {\n    service({\n      url,\n      method: 'post',\n      // 发送的数据\n      data,\n      //url参数\n      params\n    }).then(res => {\n      resolve(res.data);\n    });\n  });\n}\nexport function FormPost({\n  url,\n  data = {},\n  params = {}\n}) {\n  return new Promise((resolve, reject) => {\n    service({\n      url,\n      method: 'post',\n      headers: 'Content-Type:multipart/form-data;charset=utf-8',\n      // 发送的数据\n      data,\n      //url参数\n      params\n    }).then(res => {\n      resolve(res.data);\n    });\n  });\n}\n// 请求拦截器\nservice.interceptors.request.use(config => {\n  // 每次发送请求之前判断是否存在token\n  // 如果存在，则统一在http请求的header都加上token，这样后台根据token判断你的登录情况，此处token一般是用户完成登录后储存到localstorage里的\n  let token = localStorage.getItem(\"satoken\");\n  console.log(token);\n  if (token) {\n    config.headers.satoken = token;\n  }\n  console.log(config);\n  return config;\n}, error => {\n  return Promise.error(error);\n});\n// 响应拦截器\nservice.interceptors.response.use(response => {\n  // 如果返回的状态码为200，说明接口请求成功，可以正常拿到数据\n  // 否则的话抛出错误\n  if (response.status === 200) {\n    if (response.data.code === 2011) {\n      window.location = \"http://localhost:8081/login\";\n    } else {\n      return Promise.resolve(response);\n    }\n  } else {\n    return Promise.reject(response);\n  }\n}, error => {\n  // 我们可以在这里对异常状态作统一处理\n  if (error.response.status) {\n    // 处理请求失败的情况\n    // 对不同返回码对相应处理\n    return Promise.reject(error.response);\n  }\n});","map":{"version":3,"names":["axios","Message","service","create","timeout","baseURL","headers","get","post","Get","url","params","key","console","log","Promise","resolve","reject","then","res","data","catch","err","JsonPost","method","FormPost","interceptors","request","use","config","token","localStorage","getItem","satoken","error","response","status","code","window","location"],"sources":["E:/learning/软件工程/Bloggy-app/Bloggy-app/http.js"],"sourcesContent":["import axios from \"axios\";\nimport {Message} from \"element-ui\";\n\nconst service = axios.create({\n    timeout: 30000,  // 请求 30s 超时\n    baseURL:\"http://localhost:8080\",\n    headers: {\n    get: {\n        'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'\n    },\n    post: {\n        'Content-Type': 'application/json;charset=utf-8'\n    }\n},\n})\n// get 请求\nexport function Get({ url, params = {} }) {\n    for (const key in params){\n        url=url+\"/\"+params[key]\n    }\n    console.log(url)\n    return new Promise((resolve, reject) => {\n        service\n            .get(url,)\n            .then((res) => {\n                resolve(res.data)\n            })\n            .catch((err) => {\n                reject(err)\n            })\n    })\n}\n// post\n// post请求\nexport function JsonPost({ url, data = {}, params = {} }) {\n    return new Promise((resolve, reject) => {\n        service({\n            url,\n            method: 'post',\n            // 发送的数据\n            data,\n            //url参数\n            params,\n        }).then((res) => {\n            resolve(res.data)\n        })\n    })\n}\nexport function FormPost({ url, data = {}, params = {} }) {\n    return new Promise((resolve, reject) => {\n        service({\n            url,\n            method: 'post',\n            headers: 'Content-Type:multipart/form-data;charset=utf-8',\n            // 发送的数据\n            data,\n            //url参数\n            params,\n        }).then((res) => {\n            resolve(res.data)\n        })\n    })\n}\n// 请求拦截器\nservice.interceptors.request.use(\n    (config) => {\n        // 每次发送请求之前判断是否存在token\n        // 如果存在，则统一在http请求的header都加上token，这样后台根据token判断你的登录情况，此处token一般是用户完成登录后储存到localstorage里的\n        let token=localStorage.getItem(\"satoken\");\n        console.log(token)\n        if(token){\n            config.headers.satoken = token\n        }\n        console.log(config)\n        return config\n    },\n    (error) => {\n        return Promise.error(error)\n    }\n)\n// 响应拦截器\nservice.interceptors.response.use(\n    (response) => {\n        // 如果返回的状态码为200，说明接口请求成功，可以正常拿到数据\n        // 否则的话抛出错误\n        if (response.status === 200) {\n            if (response.data.code === 2011) {\n                window.location=\"http://localhost:8081/login\";\n            }else {\n                return Promise.resolve(response);\n            }\n        } else {\n            return Promise.reject(response)\n        }\n    },\n    (error) => {\n        // 我们可以在这里对异常状态作统一处理\n        if (error.response.status) {\n            // 处理请求失败的情况\n            // 对不同返回码对相应处理\n            return Promise.reject(error.response)\n        }\n    }\n)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}